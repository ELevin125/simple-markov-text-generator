import random
import re

class MarkovTextGenerator:
    def __init__(self, input_text, order):
        self.input_text = input_text
        self.markov_model = {}
        self.build_markov_model(order)

    # extracts all the capital words from the input text
    # this is done so that the system can start with a capital letter
    def _extract_capital_states(self):
        capital_tuples = []

        for state in self.markov_model:
            if state[0].istitle():
                capital_tuples.append(state)

        return capital_tuples
    
    def _get_random_capital_state(self, capital_states):
        return random.choice(capital_states)
    
    # generates the markov model that the class will use
    def build_markov_model(self, order):
        words = self.input_text.split()
        self.markov_model = {}

        for i in range(len(words) - order):
            state = tuple(words[i:i + order])
            next_state = words[i + order]

            if state not in self.markov_model:
                self.markov_model[state] = []

            self.markov_model[state].append(next_state)

    # select and return a random string of length max_length, generated by
    # attaching a random value selected from the built markov model
    def generate_text(self, order, max_length=30, start_with_capital=True):
        output = []
        initial_state = self._get_random_capital_state(self._extract_capital_states()) if start_with_capital else random.choice(list(self.markov_model.keys()))
        output.extend(initial_state)

        for i in range(max_length):
            current_state = tuple(output[-order:])
            if current_state not in self.markov_model:
                break
            next_word = random.choice(self.markov_model[current_state])
            output.append(next_word)

        return " ".join(output)
import random
import tkinter as tk

class MarkovTextGenerator:
    def __init__(self, input_text, order):
        self.input_text = input_text
        self.markov_model = {}
        self.build_markov_model(order)

    # generates the markov model that the class will use
    def build_markov_model(self, order):
        words = self.input_text.split()
        self.markov_model = {}

        for i in range(len(words) - order):
            state = tuple(words[i:i + order])
            next_state = words[i + order]

            if state not in self.markov_model:
                self.markov_model[state] = []

            self.markov_model[state].append(next_state)

    # select and return a random string of length max_length, generated by
    # attaching a random value selected from the built markov model
    def generate_text(self, order, max_length=30):
        output = []
        initial_state = random.choice(list(self.markov_model.keys()))
        output.extend(initial_state)

        for i in range(max_length):
            current_state = tuple(output[-order:])
            if current_state not in self.markov_model:
                break
            next_word = random.choice(self.markov_model[current_state])
            output.append(next_word)

        return " ".join(output)

class MarkovTextGeneratorApp:
    def __init__(self, master, order=2, text_length=50):
        self.master = master
        self.master.title("Markov Text Generator")

        self.generator = None
        self.current_order = order

        # set up te UI
        self._order_label = tk.Label(master, text="Order:")
        self._order_label.grid(row=0, column=0, padx=5, pady=5)
        self._order_entry = tk.Entry(master)
        self._order_entry.grid(row=0, column=1, padx=5, pady=5)
        self._order_entry.insert(tk.END, str(order))

        self._length_label = tk.Label(master, text="Output Length:")
        self._length_label.grid(row=1, column=0, padx=5, pady=5)
        self._length_entry = tk.Entry(master)
        self._length_entry.grid(row=1, column=1, padx=5, pady=5)
        self._length_entry.insert(tk.END, str(text_length))

        self._generate_button = tk.Button(master, text="Generate", command=self.generate_text)
        self._generate_button.grid(row=2, column=0, columnspan=2, padx=5, pady=5)

        self.output_text = tk.Text(master, height=10, width=50, state=tk.DISABLED)
        self.output_text.grid(row=3, column=0, columnspan=2, padx=5, pady=5)


    def generate_text(self):
        input_text = ""
        with open("./gecko.txt") as f:
            input_text = f.read().replace("\n", " ")

        order = int(self._order_entry.get())
        max_length = int(self._length_entry.get())

        # only update the generator if some of values related to the model
        # was changed since the last execution
        self.generator = MarkovTextGenerator(input_text, order)
        if order != self.current_order:
            self.generator.build_markov_model(order)

        output_phrase = self.generator.generate_text(order, max_length)

        self.output_text.config(state=tk.NORMAL)
        self.output_text.delete("1.0", tk.END)
        self.output_text.insert(tk.END, output_phrase)
        self.output_text.config(state=tk.DISABLED)

def main():
    root = tk.Tk()
    app = MarkovTextGeneratorApp(root)
    root.mainloop()

if __name__ == "__main__":
    main()
